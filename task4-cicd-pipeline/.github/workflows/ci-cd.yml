name: CI/CD Pipeline for Task Manager

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_NAME: task-manager
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-test-backend:
    name: Build and Test Java Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: |
        cd task1-java-backend
        mvn clean install -DskipTests
        
    - name: Run tests
      run: |
        cd task1-java-backend
        mvn test
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: task1-java-backend/target/*.jar
        retention-days: 7

  build-frontend:
    name: Build React Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: task3-react-frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd task3-react-frontend
        npm ci
        
    - name: Lint code
      run: |
        cd task3-react-frontend
        npm run lint || true
        
    - name: Build application
      run: |
        cd task3-react-frontend
        npm run build
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: task3-react-frontend/dist
        retention-days: 7

  docker-build-and-push:
    name: Build and Push Docker Image
    needs: [build-and-test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: task2-kubernetes/target
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=,format=short
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./task2-kubernetes
        file: ./task2-kubernetes/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  security-scan:
    name: Security Scan
    needs: [build-and-test-backend]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    needs: [docker-build-and-push, build-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.taskmanager.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        
    - name: Update deployment image
      run: |
        kubectl set image deployment/task-manager \
          task-manager=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -n staging
          
    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/task-manager -n staging
        
    - name: Verify deployment
      run: |
        kubectl get pods -n staging
        kubectl get services -n staging

  notify:
    name: Send Notifications
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send Slack notification
      if: success()
      run: |
        echo "Deployment successful! üéâ"
        # Add Slack webhook here
        
    - name: Send failure notification
      if: failure()
      run: |
        echo "Deployment failed! ‚ùå"
        # Add Slack webhook here
